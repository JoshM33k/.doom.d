#+title: Doom Emacs Configuration
#+author: Josh Meek
#+property: header-args emacs-lisp :tangle config.el
#+startup: fold
#+auto_tangle: t

* Table of Contents :toc:
- [[#about-this-config][About This Config]]
- [[#updating-configel][Updating config.el]]
- [[#config-disclaimer][Config Disclaimer]]
- [[#user-identity][User Identity]]
- [[#font-settings][Font Settings]]
  - [[#fontaine][Fontaine]]
- [[#doom-emacs-theme][Doom Emacs Theme]]
- [[#line-numbering][Line Numbering]]
- [[#org-mode-settings][Org Mode Settings]]
  - [[#org-directory][Org Directory]]
  - [[#word-wrap-in-org-files][Word Wrap in Org Files]]
  - [[#auto-tangle][Auto-Tangle]]
  - [[#hide-emphasis-markers][Hide Emphasis Markers]]
  - [[#improve-list-characters][Improve List Characters]]
  - [[#org-bullets][Org Bullets]]
  - [[#denote][Denote]]
- [[#window-and-frame-management][Window and Frame Management]]
  - [[#initial-frame-sizing][Initial Frame Sizing]]
  - [[#focus-new-window][Focus New Window]]
- [[#remove-quit-verification][Remove Quit Verification]]
- [[#splash-image][Splash Image]]
- [[#company-adjustments][Company Adjustments]]
- [[#java-development][Java Development]]
  - [[#yasnippet][Yasnippet]]
  - [[#lsp-mode][Lsp-mode]]
  - [[#which-key][Which-key]]
  - [[#lsp-java][Lsp-java]]
  - [[#dap-mode][Dap-Mode]]
  - [[#helm][Helm]]
- [[#random-fixes][Random Fixes]]
  - [[#reduce-toolbar-thickness-on-mac][Reduce Toolbar Thickness on Mac]]
- [[#useful-functions][Useful Functions]]
  - [[#google-current-word][Google Current Word]]

* About This Config
This org file is a /literate/ config file for [[https://github.com/doomemacs/doomemacs][Doom Emacs]]. What that means is that this file itself is evaluated and used to write out the actual config.el file that is read when Doom Emacs starts up. The config.el file is no longer edited directly. This process is called /tangling/. This allows us to write out our documentation directly alongside the /actual code/ that will be evaluated by Doom Emacs, which is pretty neat!

* Updating config.el
After making changes to any source block in this file, it must then be tangled, writing out the new version of config.el.

To do this, put your cursor on the property line at the top of the file, and do ~C-c C-c~. This will refresh Doom Emacs. Then, run ~M-x org-babel-tangle~ (or, use the keybinding ~C-c C-v t~). After running this tangle command, the config.el file should be updated.

You shouldn't need to run ~doom sync~ after updating your config.el, just reload Doom Emacs for the changes to take effect.

* Config Disclaimer
The following is a disclaimer that will be added to the resulting config.el file as a warning.

#+begin_src emacs-lisp
;; STOP!! DO NOT EDIT THIS FILE DIRECTLY!!
;; ----------------------------------------
;; This file is generated from README.org, a literate source file.
;; You should make any changes there and then regenerate this file per the instructions found there.
#+end_src

* User Identity
This sets my name and email address, which some emacs tools may use.

#+begin_src emacs-lisp
(setq user-full-name "Josh Meek"
      user-mail-address "meek.josh@gmail.com")
#+end_src

* Font Settings
Doom Emacs exposes five variables for controlling fonts:
- ~doom-font~ - The primary font to use
- ~doom-variable-pitch-font~ - a non-monospace font (where applicable)
- ~doom-big-font~ - The font used in ~doom-big-font-mode~, a mode designed for presentations or streaming.
- ~doom-symbol-font~ - font used for symbols
- ~doom-serif-font~ - font used for the ~fixed-pitch-serif~ face

More info on doom fonts can be found at ~C-h v doom-font~.

My default font I like to use for Emacs is made by JetBrains, called JetBrainsMono. You can download it here:  https://www.jetbrains.com/lp/mono/

Below, a function is defined, ~font-exists-p~, that when passed a font string will return true if the font is found in the list of system fonts.
This function is then used in a condition block to check whether a font is used before setting that as our doom font.
I currently have another check for JetBrains Mono in the condition as an example of how you'd add a fallback font if the first oen is not found.

#+begin_src emacs-lisp
(defun font-exists-p (font) (if (null (x-list-fonts font)) nil t))
(when (window-system)
  (cond ((font-exists-p "JetBrains Mono") (setq doom-font (font-spec :family "JetBrains Mono" :size 13)))
    ((font-exists-p "JetBrains Mono") (setq doom-font (font-spec :family "JetBrains Mono" :size 13))))
  (cond ((font-exists-p "Noto Sans") (setq doom-variable-pitch-font (font-spec :family "Noto Sans" :size 13)))))
;;(setq doom-font (font-spec :family "JetBrains Mono" :size 13))
#+end_src

On my Macbook, the font size of 13 is a bit small to read. I still want 13 to be my default size elsewhere, but for Mac OS, I bump the size up to 14 instead, still using whatever font was set above by not specifying a new font family, just a new size.

I don't currently like how I'm doing this, but it's the only way I've found so far to make it work. The inner portion of the 'is macos' condition is just a copy/paste of the above font settings, but with a larger size. I was hoping I could simply specify ~(setq doom-font (font-spec :size 14))~ and that would leave the existing font family unchanged, but that does not look to be the case.

#+begin_src emacs-lisp
(cond (:system 'macos
               (when (window-system)
  (cond ((font-exists-p "JetBrains Mono") (setq doom-font (font-spec :family "JetBrains Mono" :size 14)))
    ((font-exists-p "JetBrains Mono") (setq doom-font (font-spec :family "JetBrains Mono" :size 14))))
  (cond ((font-exists-p "Noto Sans") (setq doom-variable-pitch-font (font-spec :family "Noto Sans" :size 14)))))
               ))
#+end_src

** Fontaine
Fontaine lets you define font presents, and then swap between them using ~M-x fontaine-set-preset~. The documentation for fontaine is here: https://protesilaos.com/emacs/fontaine
The configuration here was primarily based on the setup found here: https://github.com/duien/dotfiles/blob/main/home/.yak-emacs/init.el

#+begin_src emacs-lisp
(use-package! fontaine
  :preface
  (defvar jm/base-font-height
    160
    "The main font size")
  :demand
  :init
  (setq fontaine-presets
        `((JetBrains-Light
           :default-family "JetBrains Mono"
           :default-weight light
           :default-height ,(- jm/base-font-height 10))
          (JetBrains-Regular
           :default-family "JetBrains Mono"
           :default-weight regular
           :default-height ,(- jm/base-font-height 10))
          (VCTR-Light
           :default-family "VCTR Mono Trial v0.12"
           :default-weight light
           :default-height ,(- jm/base-font-height 10))
          (VCTR-Regular
           :default-family "VCTR Mono Trial v0.12"
           :default-weight regular
           :default-height ,(- jm/base-font-height 10))
          ))
  :config
  (fontaine-set-preset (fontaine-store-latest-preset))
  :hook
  (fontaine-set-preset . fontaine-store-latest-preset))
;;(fontaine-set-preset (or (fontaine-restore-latest-preset) 'JetBrains-Regular))
;(fontaine-mode 1)

#+end_src

* Doom Emacs Theme
~doom-theme~ is used to set a color theme that will be used upon startup. To browse the other available themes, you can use ~M-x load-theme~ to check them out.

#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src

* Line Numbering
I prefer line numbering in all my Emacs documents. This line enables the display of line numbers. If you want to disable it, change this to ~nil~. For relative line numbers, change this to ~relative~ instead.

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

* Org Mode Settings
These settings all pertain to org mode, Emac's brilliant mode for notetaking, todo lists, and so much more. Org mode is kind of like Markdown on steroids.

** Org Directory
This simply sets the default org mode directory to a folder in your user home directory called ~org~.

#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src

** Word Wrap in Org Files
This setting turns on ~visual-line-mode~ for org files, which wraps text to a new line if it does not visually fit based on your current window size.

#+begin_src emacs-lisp
(add-hook! org-mode :append
           #'visual-line-mode)
#+end_src

** Auto-Tangle
Sometimes it can be a pain to remember to tangle this file, so this sets up 'auto-tangle-mode' and adds it to org mode as an option. To auto-tangle a file on save, just add ~#+auto_tangle: t~ to the top of your org file.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src

** Hide Emphasis Markers
This will hide the various emphasis marks that modify text (e.g. /.../ for italics, *...* for bold, etc.). The text still exists in the file, just isn't displayed.

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

** Improve List Characters
This will change the ~-~ character used in lists to a centered dot instead.

#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+end_src

** Org Bullets
This will improve the look of headline markers, replacing them with different unicode bullets.

#+begin_src emacs-lisp
(use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Denote
[[https://github.com/protesilaos/denote][Denote]] is a tool for creating and managing notes and files that works amazingly with org mode. I use it to implement a [[https://zettelkasten.de/overview/][Zettelkasten]] (sorta) system for tracking and maintaining my notes into a kind of mind map, with interconnected links between files.

At the core, Denote will create a file for you with a very specific naming scheme: ~DATE==SIGNATURE--TITLE__KEYWORDS.EXTENSION~. This works great because you can very easily use dired or any other search mechanism to narrow files down based on name and keyword, and they are all sorted by date created.

Denote also has built-in tools for creating links between files, managing keywords and updating your file names, displaying backlinks, creating dynamic blocks inside files that display all other files with a matching regex, and so much more. Check out the [[https://protesilaos.com/emacs/denote][full manual]] for all of Denote's powerful features, as I am just beginning to scratch the surface here.

*** Directory
This sets the default denote directory. Note that this is the same as my org mode default directory as well.

#+begin_src emacs-lisp
(setq denote-directory (expand-file-name "~/org/"))
#+end_src

*** Keywords
This is a starting list of keywords that denote will suggest. You don't need to stress too much about these, as you can create your own on the fly and denote will then 'know' the keywords you've used in any of your files as well.

#+begin_src emacs-lisp
(setq denote-known-keywords '("emacs" "programming" "managing" "learning"))
#+end_src

*** Dates
Use org mode's date picking interface when needed.

#+begin_src emacs-lisp
(setq denote-date-prompt-use-org-read-date t)
#+end_src

*** Backlinks
This tells denote to show a few lines of context from the file when display backlinks, instead of just showing the file name.

#+begin_src emacs-lisp
(setq denote-backlinks-show-context t)
#+end_src

*** Fontification
This setting does not currently work in Doom Emacs because Doom uses diredfl, and these fontification settings do not work when diredfl is enabled. However, I'm leaving them here as reference in case that ever changes.

#+begin_src emacs-lisp
(setq denote-dired-directories-include-subdirectories t)
(setq denote-dired-directories
      (list denote-directory
            (expand-file-name "~/org/")))
(add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
#+end_src

*** Key Mapping
This section defines some custom key mappings for denote that attempt to fit into the same format and flow as the other Doom Emacs keymappings. Mainly, this means that the all start with ~SPACE d~ for denote, and then try to choose sensible letters that are easy to remember.

Not every denote function is present here, just the ones I use most often in my day-to-day workflow.

#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("d" . "denote")
                :desc "new denote note" "d" #'denote
                :desc "link to existing note, or create a new note" "l" #'denote-link-or-create
                (:prefix ("b" . "backlinks")
                         :desc "show backlinks to the current note" "b" #'denote-backlinks
                         :desc "next backlink" "j" #'denote-backlinks-mode-next
                         :desc "previous backlink" "k" #'denote-backlinks-mode-previous)
                (:prefix ("s" . "stats")
                         :desc "count notes" "c" #'denote-explore-count-notes
                         :desc "count keywords" "k" #'denote-explore-count-keywords
                         :desc "keywords barchart" "b" #'denote-explore-keywords-barchart
                         :desc "extensions barchart" "e" #'denote-explore-extensions-barchart)
                (:prefix ("u" . "Utilities")
                         :desc "insert dynamic links block" "l" #'denote-org-extras-dblock-insert-links
                         :desc "update dynamic links block" "u" #'org-dblock-update)
                (:prefix ("r" . "random walks")
                         :desc "random note" "r" #'denote-explore-random-note
                         :desc "random link" "l" #'denote-explore-random-link
                         :desc "random keyword" "k" #'denote-explore-random-keyword)
                (:prefix ("j" . "janitor")
                         :desc "duplicate notes" "d" #'denote-explore-identify-duplicate-notes
                         :desc "zero keywords" "z" #'denote-explore-zero-keywords
                         :desc "single keywords" "i" #'denote-explore-single-keywords
                         :desc "sort keywords" "s" #'denote-explore-sort-keywords
                         :desc "rename keyword" "r" #'denote-explore-rename-keyword)))
#+end_src

*** Denote Explore
Denote Explore is an additional package that helps to visualize your denote notes and provides some helpful utilities for managing your notes, such as 'random walks' and some janitorial services that seek out duplicate notes, single keyword files, and more.

These settings just do some generic setup for denote explore, mainly specifying where the graph images should be created.

#+begin_src emacs-lisp
(use-package! denote-explore
  :custom
  ;; Location of graph files
  (denote-explore-network-directory "~/org/graphs/")
  (denote-explore-network-filename "denote-network")
  ;; Output format
  (denote-explore-network-format 'graphviz)
  (denote-explore-network-graphviz-filetype "svg")
  ;; Exlude keywords or regex
  (denote-explore-network-keywords-ignore '("bib")))
#+end_src

* Window and Frame Management
These settings pertain to either the Emacs "window" itself (the frame) or to split windows inside of Emacs.

** Initial Frame Sizing
This sets the initial size of the Doom Emacs window to be proportional to the screen displaying it. It should take up 70% of the window, and be centered.

This was taken from: https://www.reddit.com/r/emacs/comments/9c0a4d/tip_setting_initial_frame_size_and_position/

Note: This does not work well on dual-monitor setups currently.
- [ ] - Fix issue with the set-initial-frame method for dual monitors to only 'fit' to a single monitor.

#+begin_src emacs-lisp
(defun my/set-initial-frame ()
  (let* ((base-factor 0.70)
         (a-width (* (display-pixel-width) base-factor))
         (a-height (* (display-pixel-height) base-factor))
         (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
         (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
    (set-frame-position (selected-frame) a-left a-top)
    (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
(setq frame-resize-pixelwise t)
(my/set-initial-frame)
#+end_src

** Focus New Window
After splitting a window (either vertically or horizontally), this makes it so that the new window immediately has focus, instead of requiring you to switch to it.

#+begin_src emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

* Remove Quit Verification
By default, Doom Emacs asks if you really want to quit when you try to quit. This is annoying. This stops that from happening.

#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
#+end_src

* Splash Image
The splash image is displayed when you first open Doom Emacs, and for a bit of fun we can change it to something a smidge flashier. I came across these images and the idea to modify the splash screen here: https://gitlab.com/zzamboni/dot-doom/-/tree/master/splash

The following code will randomly choose a splash image from amongst the ones listed and display it on the start page. Any new splash images should be placed in ~.doom.d/splash~ and then added to this list.

#+begin_src emacs-lisp
(let ((alternatives '(;;"doom-emacs-color.png"
                      ;;"doom-emacs-color2.svg"
                      ;;"doom-emacs-bw-light.svg"
                      "doom-emacs-flugo-slant_out_purple.png"
                      ;;"doom-emacs-flugo-slant_out_bw.png"
                      )))
  (setq fancy-splash-image
        (concat doom-user-dir "splash/"
                (nth (random (length alternatives)) alternatives))))
#+end_src

* Company Adjustments
Company is the autocompletion tool that Doom Emacs uses, and it can get quite annoying when it tries to autocomplete in a text note. The following code is all trying to disable company in org mode files, and /something/ is working to do that, but I'm not sure exactly which piece. Further investigation will need to be done to determine what can be removed.

#+begin_src emacs-lisp
(after! company
  (set-company-backend! 'org-mode nil))

(setq company-global-modes '(not org-mode))

(after! company
    ;;; Prevent suggestions from being triggered automatically. In particular,
  ;;; this makes it so that:
  ;;; - TAB will always complete the current selection.
  ;;; - RET will only complete the current selection if the user has explicitly
  ;;;   interacted with Company.
  ;;; - SPC will never complete the current selection.
  ;;;
  ;;; Based on:
  ;;; - https://github.com/company-mode/company-mode/issues/530#issuecomment-226566961
  ;;; - https://emacs.stackexchange.com/a/13290/12534
  ;;; - http://stackoverflow.com/a/22863701/3538165
  ;;;
  ;;; See also:
  ;;; - https://emacs.stackexchange.com/a/24800/12534
  ;;; - https://emacs.stackexchange.com/q/27459/12534

  ;; <return> is for windowed Emacs; RET is for terminal Emacs
  (dolist (key '("<return>" "RET"))
    ;; Here we are using an advanced feature of define-key that lets
    ;; us pass an "extended menu item" instead of an interactive
    ;; function. Doing this allows RET to regain its usual
    ;; functionality when the user has not explicitly interacted with
    ;; Company.
    (define-key company-active-map (kbd key)
      `(menu-item nil company-complete
                  :filter ,(lambda (cmd)
                             (when (company-explicit-action-p)
                              cmd)))))
  ;; (define-key company-active-map (kbd "TAB") #'company-complete-selection)
  (map! :map company-active-map "TAB" #'company-complete-selection)
  (map! :map company-active-map "<tab>" #'company-complete-selection)
  (define-key company-active-map (kbd "SPC") nil)

  ;; Company appears to override the above keymap based on company-auto-complete-chars.
  ;; Turning it off ensures we have full control.
  (setq company-auto-commit-chars nil) ;; this appears to now be obsolete, replaced with the below
  (setq company-insertion-triggers nil)
  )
#+end_src

* Java Development
Getting java development working as well as IntelliJ is a backburner project for me. This section will be the projects and configurations added to hopefully enable that. Things added here may get moved to their own sections that are more appropriate once this setup solidifies.

** Yasnippet
This turns on yas global mode.

#+begin_src emacs-lisp
(use-package! yasnippet :config(yas-global-mode))
#+end_src

** Lsp-mode

#+begin_src emacs-lisp
(use-package! lsp-mode :hook ((lsp-mode . lsp-enable-which-key-integration))
              :config (setq lsp-completion-enable-additional-text-edit nil))
#+end_src

** Which-key

#+begin_src emacs-lisp
(use-package! which-key :config (which-key-mode))
#+end_src

** Lsp-java

#+begin_src emacs-lisp
(use-package! lsp-java :config (add-hook 'java-mode-hook 'lsp))
#+end_src

** Dap-Mode

#+begin_src emacs-lisp
(use-package! dap-mode :after lsp-mode :config (dap-auto-configure-mode))
#+end_src


** Helm

#+begin_src emacs-lisp
;(use-package! helm :config (helm-mode))
#+end_src

* Random Fixes
This section is for random fixes and hacks that aren't important enough to put anywhere else. Some of them might later be fixed with updated packages!

** Reduce Toolbar Thickness on Mac
This is seemingly a bug in emacs-mac, but this is hopefully a quick-but-hacky fix to make the toolbar regular sized. All it does is enable ~tool-bar-mode~ and then instantly disable it, causing the toolbar to resize itself down to the correct size.

See: https://github.com/doomemacs/doomemacs/issues/7532
And the source of this fix: https://github.com/doomemacs/doomemacs/issues/7686#issuecomment-1954271794


#+begin_src emacs-lisp
;; workaround for large title bar on macOS Sonoma
;; see https://github.com/doomemacs/doomemacs/issues/7532
(add-hook 'doom-after-init-hook (lambda () (tool-bar-mode 1) (tool-bar-mode 0)))
#+end_src

* Useful Functions
These functions will all live under ~jm/~ so that you can find and run them all with ~M-x jm/~

** Google Current Word
This will google the currently highlighted word, opening a web browser page to do so. This probably doesn't work at all when using X11 forwarding.

#+begin_src emacs-lisp
(defun jm/google-current-word ()
  ;; initially written by chatgpt but later modified by u/Aminumbra
  "Search the current word on Google using browse-url."
  (interactive)
  (let ((word (thing-at-point 'word)))
    (if word
        (browse-url (concat "https://www.google.com/search?q=" word))
      (message "No word found at point."))))
#+end_src
